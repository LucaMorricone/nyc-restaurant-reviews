{"version":3,"sources":["js/index.js"],"names":["w","d","n","fetch","callback","map","markers","tilesLoaded","initMap","listenerTiles","google","maps","Map","getElementById","center","lat","lng","zoom","scrollwheel","keyboardShortcuts","updateRestaurants","addListener","skipMap","createElement","innerHTML","mapContainer","insertAdjacentElement","href","mapLabel","className","querySelector","mapDOMElement","div","setAttribute","addEventListener","classList","add","remove","setOptions","event","removeListener","nSelect","staticMap","swapMapListener","loadMap","script","src","appendChild","swapMap","style","display","removeAttribute","setTimeout","focus","fun","e","initResponsiveFreeStaticMap","addSelectListener","cSelect","DBHelper","fetchNeighborhoods","console","log","error","then","fillCuisinesHTML","catch","onLine","fillMapOfflineAlert","mapOfflineAlert","readyState","ifDOMLoaded","h","scale","aspectRatio","toFixed","round","backgroundImage","select","neighborhoods","forEach","option","value","neighborhood","cuisine","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","setMap","length","m","notice","restaurants","ul","restaurant","image","alt","article","cuisine_type","name","webpSource","jpgSource","formatSrcset","sizes","picture","srcset","replace","imageUrlForRestaurant","removeEventListener","lazyLoad","strong","address","addressContent","more","button","urlForRestaurant","li","createRestaurantHTML","addMarkersToMap","s","marker","mapMarkerForRestaurant","location","url","overlay","OverlayView","addAccessibilityToMarkers","this","markerLayer","id","fillRestaurantsHTML","areas","querySelectorAll","tabIndex","_loop","i","layers","keyCode","title","window","document","navigator"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\r\n\r\n((w, d, n) => {\r\n\r\n  if (!w.fetch) {\r\n    console.log('Fetch API not supported');\r\n    return;\r\n  }\r\n\r\n  let map,\r\n    markers = [],\r\n    tilesLoaded = false;\r\n\r\n  /**\r\n   * Initialize Google map, called from HTML.\r\n   */\r\n  w.initMap = () => {\r\n    if(!n.onLine) return;\r\n    let loc = {\r\n      lat: 40.722216,\r\n      lng: -73.987501\r\n    };\r\n    map = new google.maps.Map(d.getElementById('map'), {\r\n      center: loc,\r\n      zoom: 12,\r\n      scrollwheel: false,\r\n      keyboardShortcuts: false // Disable Google Maps keyboard UI.\r\n    });\r\n    updateRestaurants();\r\n    initMapAccessibility();\r\n  };\r\n\r\n  /**\r\n   * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n   */\r\n  onReady(() => {\r\n    initStaticMap();\r\n    addSelectListener();\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n    updateRestaurants();\r\n    if (!n.onLine) { // Check if offline.\r\n      fillMapOfflineAlert();\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Catch DOMContentLoaded event even the script is loading asynchronously.\r\n   */\r\n  function onReady(callback) {\r\n    d.readyState !== 'loading' ? callback() : d.addEventListener('DOMContentLoaded', function ifDOMLoaded() {\r\n      callback();\r\n      d.removeEventListener('DOMContentLoaded', ifDOMLoaded);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize and make responsive Google maps static API.\r\n   */\r\n  function initResponsiveFreeStaticMap() {\r\n    const staticMap = d.getElementById('static-map');\r\n    let w = staticMap.clientWidth,\r\n      h = staticMap.clientHeight;\r\n    /* The free Google maps static API returns 640x640 maximum image resolution, and 1280x1280 with scale 2. */\r\n    const scale = w > 640 || h > 640 ? 2 : 1,\r\n    aspectRatio = w > h ? +(w/h).toFixed(6) : +(h/w).toFixed(6);\r\n    if (w > h) {\r\n      w = w > 640 ? 640 : w;\r\n      h = Math.round(w/aspectRatio);\r\n    } else {\r\n      h = h > 640 ? 640 : h;\r\n      w = Math.round(h/aspectRatio);\r\n    }\r\n    staticMap.style.backgroundImage = `url(https://maps.googleapis.com/maps/api/staticmap?center=40.722216,-73.987501&zoom=12&size=${w}x${h}&scale=${scale}&format=jpg&key=AIzaSyAxfOOcB40yMKfupF4qyfa4hwvhTclZboA)`;\r\n  }\r\n\r\n  function swapMapListener() {\r\n    const staticMap = d.getElementById('static-map');\r\n    staticMap.addEventListener('click', function fun() {\r\n      loadMap();\r\n      swapMap();\r\n      staticMap.removeEventListener('click', fun);\r\n    });\r\n\r\n    staticMap.addEventListener('keydown', function fun(e) {\r\n      if (e.keyCode === 13) {\r\n        loadMap();\r\n        swapMap();\r\n        staticMap.removeEventListener('keydown', fun);\r\n      }\r\n    });\r\n\r\n    function loadMap() {\r\n      const script = d.createElement('script');\r\n      script.src = 'https://maps.googleapis.com/maps/api/js?key=AIzaSyAxfOOcB40yMKfupF4qyfa4hwvhTclZboA&libraries=places&callback=initMap';\r\n      script.setAttribute('async', '');\r\n      d.getElementsByTagName('head')[0].appendChild(script);\r\n    }\r\n\r\n    function swapMap() {\r\n      d.getElementById('map').style.display = 'block';\r\n      staticMap.removeAttribute('tabindex');\r\n      staticMap.removeAttribute('role');\r\n      staticMap.removeAttribute('aria-label');\r\n      setTimeout(() => {\r\n        d.querySelector('#map div[tabindex=\"0\"]').focus();\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  function initStaticMap() {\r\n    swapMapListener();\r\n    initResponsiveFreeStaticMap();\r\n    // Reboot Google maps static API on window resize.\r\n    w.addEventListener('resize', () => {\r\n      requestAnimationFrame(initResponsiveFreeStaticMap);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set map offline alert.\r\n   */\r\n  function fillMapOfflineAlert() {\r\n    const staticMap = d.getElementById('static-map');\r\n    const mapOfflineAlert = d.createElement('p');\r\n    mapOfflineAlert.setAttribute('role', 'alert');\r\n    mapOfflineAlert.innerHTML = '⚠ You are offline, map is not available.';\r\n    staticMap.classList.add('offline');\r\n    staticMap.appendChild(mapOfflineAlert);\r\n  }\r\n\r\n  /**\r\n   * Add event listener on select elements to filter results.\r\n   */\r\n  function addSelectListener() {\r\n    const nSelect = d.getElementById('neighborhoods-select');\r\n    const cSelect = d.getElementById('cuisines-select');\r\n    nSelect.addEventListener('change', updateRestaurants);\r\n    cSelect.addEventListener('change', updateRestaurants);\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods and set their HTML with proper error handling.\r\n   */\r\n  function fetchNeighborhoods() {\r\n    DBHelper.fetchNeighborhoods()\r\n      .then(fillNeighborhoodsHTML)\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Set neighborhoods HTML.\r\n   */\r\n  function fillNeighborhoodsHTML(neighborhoods) {\r\n    const select = d.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n      const option = d.createElement('option');\r\n      option.innerHTML = neighborhood;\r\n      option.value = neighborhood;\r\n      select.appendChild(option);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines and set their HTML with proper error handling.\r\n   */\r\n  function fetchCuisines() {\r\n    DBHelper.fetchCuisines()\r\n      .then(fillCuisinesHTML)\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Set cuisines HTML.\r\n   */\r\n  function fillCuisinesHTML(cuisines) {\r\n    const select = d.getElementById('cuisines-select');\r\n    cuisines.forEach(cuisine => {\r\n      const option = d.createElement('option');\r\n      option.innerHTML = cuisine;\r\n      option.value = cuisine;\r\n      select.appendChild(option);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fix some accessibility issue with Google map.\r\n   */\r\n  function initMapAccessibility() {\r\n    // This event fires when the visible tiles have finished loading.\r\n    const listenerTiles = map.addListener('tilesloaded', () => {\r\n      const mapContainer = d.getElementById('map-container');\r\n\r\n      // Add a skip map link.\r\n      const skipMap = d.createElement('a');\r\n      skipMap.className = 'skip-link button';\r\n      skipMap.href = '#filter-options';\r\n      skipMap.innerHTML = 'Skip the map';\r\n      mapContainer.insertAdjacentElement('afterbegin', skipMap);\r\n\r\n      // Add a map label.\r\n      const mapLabel = d.createElement('h2');\r\n      mapLabel.id = 'map-label';\r\n      mapLabel.className = 'sr-only';\r\n      mapLabel.innerHTML = 'Google Maps Widget: shows restaurants location';\r\n      mapContainer.insertAdjacentElement('afterbegin', mapLabel);\r\n\r\n      // Add aria-lebelledBy to the div focusable with tab.\r\n      const div = d.querySelector('#map div[tabindex=\"0\"]');\r\n      div.setAttribute('aria-labelledby', 'map-label');\r\n\r\n      const mapDOMElement = d.getElementById('map');\r\n\r\n      // Highlight when map DOM element is onfocus.\r\n      div.addEventListener('focus', () => {\r\n        mapDOMElement.classList.add('focused');\r\n      });\r\n\r\n      // Remove highlight when map DOM element is onblur.\r\n      div.addEventListener('blur', () => {\r\n        mapDOMElement.classList.remove('focused');\r\n      });\r\n\r\n      /* Enable Google Maps keyboard UI, when map DOM element or any of his children is onfocus. */\r\n      mapDOMElement.addEventListener('focus', () => {\r\n        map.setOptions({keyboardShortcuts: true});\r\n      }, true);\r\n\r\n      /* Disable Google Maps keyboard UI, when map DOM element or any of his children is onblur. */\r\n      mapDOMElement.addEventListener('blur', () => {\r\n        map.setOptions({keyboardShortcuts: false});\r\n      }, true);\r\n\r\n      // Remove event listener.\r\n      google.maps.event.removeListener(listenerTiles);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update page and map for current restaurants with proper error handling.\r\n   */\r\n  function updateRestaurants() {\r\n    const cSelect = d.getElementById('cuisines-select');\r\n    const nSelect = d.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood)\r\n      .then(restaurants => {\r\n        resetRestaurants();\r\n        fillRestaurantsHTML(restaurants);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Clear current restaurants, their HTML and remove their map markers.\r\n   */\r\n  function resetRestaurants() {\r\n    // Remove all restaurants.\r\n    const ul = d.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n    // If offline, markers could be not initialized.\r\n    if (markers.length) {\r\n      /* Remove all map markers. When a DOM Element is removed, its listeners are removed from memory too. */\r\n      markers.forEach(m => m.setMap(null));\r\n      markers = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create all restaurants HTML and add them to the webpage.\r\n   */\r\n  function fillRestaurantsHTML(restaurants) {\r\n    const notice = d.getElementById('results-notice');\r\n    if (!restaurants.length) {\r\n      notice.innerHTML = 'No restaurants found';\r\n    } else {\r\n      const ul = d.getElementById('restaurants-list');\r\n      restaurants.forEach(restaurant => {\r\n        ul.appendChild(createRestaurantHTML(restaurant));\r\n      });\r\n      let s = (restaurants.length > 1) ? 's' : '';\r\n      notice.innerHTML = `${restaurants.length} restaurant${s} found`;\r\n    }\r\n    if (n.onLine) addMarkersToMap(restaurants);\r\n  }\r\n\r\n  /**\r\n   * Create restaurant HTML.\r\n   */\r\n  function createRestaurantHTML(restaurant) {\r\n    const li = d.createElement('li');\r\n    const article = d.createElement('article');\r\n\r\n    const image = d.createElement('img');\r\n    image.src = '/img/image-placeholder.svg';\r\n    image.className = 'restaurant-img';\r\n    /* Adding alternative text for images is the first principle of web accessibility. [...] Every image must have an alt attribute. This is a requirement of HTML standard (with perhaps a few exceptions in HTML5). Images without an alt attribute are likely inaccessible. In some cases, images may be given an empty or null alt attribute (e.g., alt=\"\"). https://webaim.org/techniques/alttext/ */\r\n    image.alt = restaurant.photoDescription || `The ${restaurant.cuisine_type} Restaurant ${restaurant.name}`;\r\n\r\n    if (!restaurant.photograph) {\r\n      article.appendChild(image);\r\n    } else {\r\n      const picture = d.createElement('picture');\r\n      const jpgSource = d.createElement('source');\r\n      const webpSource = d.createElement('source');\r\n      jpgSource.sizes = '(min-width: 1366px) calc((1366px - 5rem) / 4), (min-width: 1080px) calc((100vw - 4rem) / 3), (min-width: 700px) calc((100vw - 3rem) / 2), calc(100vw - 2rem)';\r\n      webpSource.sizes = jpgSource.sizes;\r\n      jpgSource.srcset = DBHelper.formatSrcset(restaurant);\r\n      webpSource.srcset = jpgSource.srcset.replace(/w.jpg/g, 'w.webp');\r\n\r\n      picture.appendChild(image);\r\n      article.appendChild(picture);\r\n\r\n      // Simple lazy loading implementation on scroll.\r\n      w.addEventListener('scroll', function lazyLoad() {\r\n        image.insertAdjacentElement('beforebegin', webpSource);\r\n        image.insertAdjacentElement('beforebegin', jpgSource);\r\n        image.src = DBHelper.imageUrlForRestaurant(restaurant, 800);\r\n        w.removeEventListener('scroll', lazyLoad);\r\n      });\r\n    }\r\n\r\n    const name = d.createElement('h3');\r\n    name.innerHTML = restaurant.name;\r\n    article.appendChild(name);\r\n\r\n    const neighborhood = d.createElement('p');\r\n    const strong = d.createElement('strong');\r\n    strong.innerHTML = `${restaurant.neighborhood}`;\r\n    neighborhood.appendChild(strong);\r\n    article.appendChild(neighborhood);\r\n\r\n    const address = d.createElement('address');\r\n    const addressContent = d.createElement('p');\r\n    addressContent.innerHTML = restaurant.address;\r\n    address.appendChild(addressContent);\r\n    article.appendChild(address);\r\n\r\n    const more = d.createElement('p');\r\n    const button = d.createElement('a');\r\n    button.innerHTML = 'View Details';\r\n    button.href = DBHelper.urlForRestaurant(restaurant);\r\n    button.className = 'button';\r\n    /* Relying on the title attribute is currently discouraged as many user agents do not expose the attribute in an accessible manner as required by w3c specifications. https://www.w3.org/TR/html/dom.html#the-title-attribute */\r\n    /* The only very tiny exception a title attribute will be read by a screen reader is if there's absolutely no link anchor text. https://silktide.com/i-thought-title-text-improved-accessibility-i-was-wrong/ */\r\n    /*  One alternative option could be using aria-labelledby, but in this case it's better using the aria-label attribute instead of title. N.B. The aria-label overrides the link text. */\r\n    button.setAttribute('aria-label', `View Details about ${restaurant.name}`);\r\n    more.appendChild(button);\r\n    article.appendChild(more);\r\n\r\n    li.appendChild(article);\r\n    return li;\r\n  }\r\n\r\n  /**\r\n   * Add markers for current restaurants to the map.\r\n   */\r\n  function addMarkersToMap(restaurants) {\r\n    restaurants.forEach(restaurant => {\r\n      // Add marker to the map.\r\n      const marker = DBHelper.mapMarkerForRestaurant(restaurant, map);\r\n      marker.addListener('click', () => {\r\n        w.location.href = marker.url;\r\n      });\r\n      markers.push(marker);\r\n    });\r\n    // Create an overlay object for assign an id to markerLayer.\r\n    const overlay = new google.maps.OverlayView();\r\n    overlay.draw = function () {\r\n      this.getPanes().markerLayer.id='markerLayer';\r\n    };\r\n    overlay.setMap(map);\r\n    if (!tilesLoaded) {\r\n      // This event fires when the visible tiles have finished loading.\r\n      const listenerTiles = map.addListener('tilesloaded', () => {\r\n        addAccessibilityToMarkers(restaurants);\r\n        tilesLoaded = true;\r\n        google.maps.event.removeListener(listenerTiles);\r\n      });\r\n    } else {\r\n      addAccessibilityToMarkers(restaurants);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make markers focusable.\r\n   */\r\n  function addAccessibilityToMarkers(restaurants) {\r\n    setTimeout(() => {\r\n      // Markers are coded with area tags.\r\n      const areas = d.querySelectorAll('[id^=\"gmimap\"]> area');\r\n      /* Seems impossible to style marker directly, but to any marker corresponds an img tag and the order is the same. */\r\n      const layers = d.querySelectorAll('#markerLayer img');\r\n      for (let i = 0; i < areas.length; i++) {\r\n        areas[i].tabIndex = 0;\r\n        areas[i].addEventListener('focus', () => {\r\n          layers[i].classList.add('focused');\r\n        });\r\n        areas[i].addEventListener('blur', () => {\r\n          layers[i].classList.remove('focused');\r\n        });\r\n        // Google Maps allows only click event on markers.\r\n        areas[i].addEventListener('keydown', (e) => {\r\n          if (e.keyCode === 13) {\r\n            w.location.href = DBHelper.urlForRestaurant(restaurants[i]);\r\n          }\r\n        });\r\n      }\r\n      const s = (restaurants.length > 1) ? 's' : '';\r\n      /* Relying on the title attribute is currently discouraged. See above. However, many sources say that <iframe> elements in the d must have a title that is not empty to describe their contents to screen reader users. https://dequeuniversity.com/rules/axe/2.2/frame-title */\r\n      d.querySelector('#map iframe').title = `Map shows ${restaurants.length} restaurant${s}`;\r\n    }, 150);\r\n  }\r\n\r\n})(window, document, navigator);"]}