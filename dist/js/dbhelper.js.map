{"version":3,"sources":["js/dbhelper.js"],"names":["DBHelper","window","indexedDB","request","open","Promise","resolve","reject","onsuccess","event","db","target","result","store","transaction","objectStore","openCursor","IDBRestaurants","length","cursor","push","value","continue","then","response","Error","statusText","json","restaurants","add","restaurant","catch","error","console","log","onerror","errorCode","fetch","DATABASE_URL","ok","fetchRestaurants","v","i","neighborhood","filter","neighborhoods","indexOf","uniqueNeighborhoods","cuisines","map","cuisine_type","cuisine","results","r","id","find","width","srcsetStr","w","imageUrlForRestaurant","join","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","marker"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port.\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants with proper error handling.\r\n   */\r\n  static fetchRestaurants() {\r\n    // Check if indexedDB is supported.\r\n    if (window.indexedDB) {\r\n      // Open a connection with indexedDB.\r\n      const request = window.indexedDB.open('nyc_rr_data');\r\n\r\n      // The fetchRestaurants function must return a Promise.\r\n      return new Promise((resolve, reject) => {\r\n\r\n        request.onsuccess = event => {\r\n          const db = event.target.result;\r\n          // Open a transaction and obtain a reference to the object store.\r\n          const store = db.transaction(['restaurants'], 'readwrite').objectStore('restaurants');\r\n\r\n          resolve(new Promise((resolve, reject) => {\r\n            // Use cursors to retrieve all objects in the object store and add them to an array.\r\n            let IDBRestaurants = [];\r\n            store.openCursor().onsuccess = event => {\r\n              let cursor = event.target.result;\r\n              // Check if the object store is empty.\r\n              if (!cursor && !IDBRestaurants.length) {\r\n                // Fetch from the network.\r\n                resolve(fetch(DBHelper.DATABASE_URL)\r\n                  .then(response => {\r\n                    if (!response.ok) {\r\n                      throw Error(`Request failed. Returned status of ${response.statusText}`);\r\n                    }\r\n                    return response.json();\r\n                  })\r\n                  .then(restaurants => {\r\n                    // Open a transaction.\r\n                    const store = db.transaction(['restaurants'], 'readwrite').objectStore('restaurants');\r\n                    // Save data into the object store.\r\n                    restaurants.forEach(restaurant => {\r\n                      store.add(restaurant);\r\n                    });\r\n                    return restaurants;\r\n                  })\r\n                  .catch(error => {\r\n                    console.log(error);\r\n                  }));\r\n              } else if (cursor) { // Check the cursor.\r\n                // Save cursor value in an array.\r\n                IDBRestaurants.push(cursor.value);\r\n                cursor.continue();\r\n              } else {\r\n                // Return all data from indexedDB.\r\n                resolve(IDBRestaurants);\r\n              }\r\n            };\r\n            store.openCursor().onerror = event => {\r\n              reject(event.target.errorCode);\r\n            };\r\n          }));\r\n        };\r\n        request.onerror = event => {\r\n          reject(event.target.errorCode);\r\n        };\r\n      });\r\n    } else { // If indexedDB is not supported.\r\n      return fetch(DBHelper.DATABASE_URL)\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw Error(`Request failed. Returned status of ${response.statusText}`);\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(restaurants => {\r\n          return restaurants;\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods() {\r\n    // Fetch all restaurants.\r\n    return DBHelper.fetchRestaurants()\r\n      .then(restaurants => {\r\n        // Get all neighborhoods from all restaurants.\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n        // Remove duplicates from neighborhoods.\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) === i);\r\n        return uniqueNeighborhoods;\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines() {\r\n    // Fetch all restaurants.\r\n    return DBHelper.fetchRestaurants()\r\n      .then(restaurants => {\r\n        // Get all cuisines from all restaurants.\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines.\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) === i);\r\n        return uniqueCuisines;\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood) {\r\n    // Fetch all restaurants.\r\n    return DBHelper.fetchRestaurants()\r\n      .then(restaurants => {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') { // Filter by cuisine.\r\n          results = results.filter(r => r.cuisine_type === cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // Filter by neighborhood.\r\n          results = results.filter(r => r.neighborhood === neighborhood);\r\n        }\r\n        return results;\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID with proper error handling.\r\n   */\r\n  static fetchRestaurantById(id) {\r\n    // Fetch all restaurants with proper error handling.\r\n    return DBHelper.fetchRestaurants()\r\n      .then(restaurants => {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (!restaurant) { // Restaurant does not exist in the database.\r\n          throw Error('Restaurant does not exist');\r\n        }\r\n        return restaurant; // Got the restaurant.\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant, width) {\r\n    /* const extension = restaurant.photograph.split('.').pop();\r\n    const name = restaurant.photograph.slice(0, restaurant.photograph.indexOf(`.${extension}`));\r\n    return (`/img/${name}-${width}w.${extension}`); */\r\n    const name = restaurant.photograph || 'image-placeholder';\r\n    return `/img/${name}-${width}w.jpg`;\r\n  }\r\n\r\n  /**\r\n   * Restaurant image srcset.\r\n   */\r\n  static formatSrcset(restaurant) {\r\n    let srcsetStr = [];\r\n    for (let w = 3; w < 9; w++) {\r\n      srcsetStr.push(`${DBHelper.imageUrlForRestaurant(restaurant, w*100)} ${w*100}w`);\r\n    }\r\n    return srcsetStr.join(', ');\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`/restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: `${restaurant.name} ${restaurant.neighborhood}`,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine) {\r\n    // Fetch all restaurants.\r\n    return DBHelper.fetchRestaurants()\r\n      .then(restaurants => {\r\n        // Filter restaurants to have only given cuisine type.\r\n        return restaurants.filter(r => r.cuisine_type == cuisine);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood) {\r\n    // Fetch all restaurants.\r\n    return DBHelper.fetchRestaurants()\r\n      .then(restaurants => {\r\n        // Filter restaurants to have only given neighborhood.\r\n        return restaurants.filter(r => r.neighborhood == neighborhood);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n}\r\n"]}