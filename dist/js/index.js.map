{"version":3,"sources":["js/index.js"],"names":["w","d","n","fetch","callback","map","markers","tilesLoaded","initMap","listenerTiles","google","maps","Map","getElementById","center","lat","lng","zoom","scrollwheel","keyboardShortcuts","updateRestaurants","addListener","skipMap","createElement","innerHTML","mapContainer","insertAdjacentElement","href","mapLabel","className","querySelector","mapDOMElement","div","setAttribute","addEventListener","classList","add","remove","setOptions","event","removeListener","nSelect","addSelectListener","cSelect","DBHelper","fetchNeighborhoods","console","log","error","then","fillCuisinesHTML","catch","onLine","fillMapOfflineAlert","mapOfflineAlert","readyState","ifDOMLoaded","select","neighborhoods","forEach","option","value","neighborhood","append","cuisine","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","setMap","length","m","notice","restaurants","ul","restaurant","image","sizes","srcset","src","imageUrlForRestaurant","alt","article","formatSrcset","name","cuisine_type","strong","address","addressContent","more","button","urlForRestaurant","li","addMarkersToMap","s","marker","mapMarkerForRestaurant","location","url","overlay","OverlayView","addAccessibilityToMarkers","this","markerLayer","id","fillRestaurantsHTML","areas","setTimeout","querySelectorAll","tabIndex","_loop","i","layers","e","keyCode","title","window","document","navigator"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\r\n\r\n((w, d, n) => {\r\n\r\n  if (!w.fetch) {\r\n    console.log('Fetch API not supported');\r\n    return;\r\n  }\r\n\r\n  let map,\r\n    markers = [],\r\n    tilesLoaded = false;\r\n\r\n  /**\r\n   * Initialize Google map, called from HTML.\r\n   */\r\n  w.initMap = () => {\r\n    if(!n.onLine) return;\r\n    let loc = {\r\n      lat: 40.722216,\r\n      lng: -73.987501\r\n    };\r\n    map = new google.maps.Map(d.getElementById('map'), {\r\n      center: loc,\r\n      zoom: 12,\r\n      scrollwheel: false,\r\n      keyboardShortcuts: false // Disable Google Maps keyboard UI.\r\n    });\r\n    updateRestaurants();\r\n    initMapAccessibility();\r\n  };\r\n\r\n  /**\r\n   * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n   */\r\n  onReady(() => {\r\n    addSelectListener();\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n    if (!n.onLine) { // Check if offline.\r\n      fillMapOfflineAlert();\r\n      updateRestaurants();\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Catch DOMContentLoaded event even the script is loading asynchronously.\r\n   */\r\n  function onReady(callback) {\r\n    d.readyState !== 'loading' ? callback() : d.addEventListener('DOMContentLoaded', function ifDOMLoaded() {\r\n      callback();\r\n      d.removeEventListener('DOMContentLoaded', ifDOMLoaded);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set map offline alert.\r\n   */\r\n  function fillMapOfflineAlert() {\r\n    const mapDOMElement = d.getElementById('map');\r\n    const mapOfflineAlert = d.createElement('p');\r\n    mapOfflineAlert.innerHTML = 'âš  You are offline, map is not available.';\r\n    mapDOMElement.setAttribute('role', 'alert');\r\n    mapDOMElement.classList.add('offline');\r\n    mapDOMElement.append(mapOfflineAlert);\r\n  }\r\n\r\n  /**\r\n   * Add event listener on select elements to filter results.\r\n   */\r\n  function addSelectListener() {\r\n    const nSelect = d.getElementById('neighborhoods-select');\r\n    const cSelect = d.getElementById('cuisines-select');\r\n    nSelect.addEventListener('change', updateRestaurants);\r\n    cSelect.addEventListener('change', updateRestaurants);\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods and set their HTML with proper error handling.\r\n   */\r\n  function fetchNeighborhoods() {\r\n    DBHelper.fetchNeighborhoods()\r\n      .then(fillNeighborhoodsHTML)\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Set neighborhoods HTML.\r\n   */\r\n  function fillNeighborhoodsHTML(neighborhoods) {\r\n    const select = d.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n      const option = d.createElement('option');\r\n      option.innerHTML = neighborhood;\r\n      option.value = neighborhood;\r\n      select.append(option);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines and set their HTML with proper error handling.\r\n   */\r\n  function fetchCuisines() {\r\n    DBHelper.fetchCuisines()\r\n      .then(fillCuisinesHTML)\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Set cuisines HTML.\r\n   */\r\n  function fillCuisinesHTML(cuisines) {\r\n    const select = d.getElementById('cuisines-select');\r\n    cuisines.forEach(cuisine => {\r\n      const option = d.createElement('option');\r\n      option.innerHTML = cuisine;\r\n      option.value = cuisine;\r\n      select.append(option);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fix some accessibility issue with Google map.\r\n   */\r\n  function initMapAccessibility() {\r\n    // This event fires when the visible tiles have finished loading.\r\n    const listenerTiles = map.addListener('tilesloaded', () => {\r\n      const mapContainer = d.getElementById('map-container');\r\n\r\n      // Add a skip map link.\r\n      const skipMap = d.createElement('a');\r\n      skipMap.className = 'skip-link button';\r\n      skipMap.href = '#filter-options';\r\n      skipMap.innerHTML = 'Skip the map';\r\n      mapContainer.insertAdjacentElement('afterbegin', skipMap);\r\n\r\n      // Add a map label.\r\n      const mapLabel = d.createElement('h2');\r\n      mapLabel.id = 'map-label';\r\n      mapLabel.className = 'sr-only';\r\n      mapLabel.innerHTML = 'Google Maps Widget: shows restaurants location';\r\n      mapContainer.insertAdjacentElement('afterbegin', mapLabel);\r\n\r\n      // Add aria-lebelledBy to the div focusable with tab.\r\n      const div = d.querySelector('#map div[tabindex=\"0\"]');\r\n      div.setAttribute('aria-labelledby', 'map-label');\r\n\r\n      const mapDOMElement = d.getElementById('map');\r\n\r\n      // Highlight when map DOM element is onfocus.\r\n      div.addEventListener('focus', () => {\r\n        mapDOMElement.classList.add('focused');\r\n      });\r\n\r\n      // Remove highlight when map DOM element is onblur.\r\n      div.addEventListener('blur', () => {\r\n        mapDOMElement.classList.remove('focused');\r\n      });\r\n\r\n      /* Enable Google Maps keyboard UI, when map DOM element or any of his children is onfocus. */\r\n      mapDOMElement.addEventListener('focus', () => {\r\n        map.setOptions({keyboardShortcuts: true});\r\n      }, true);\r\n\r\n      /* Disable Google Maps keyboard UI, when map DOM element or any of his children is onblur. */\r\n      mapDOMElement.addEventListener('blur', () => {\r\n        map.setOptions({keyboardShortcuts: false});\r\n      }, true);\r\n\r\n      // Remove event listener.\r\n      google.maps.event.removeListener(listenerTiles);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update page and map for current restaurants with proper error handling.\r\n   */\r\n  function updateRestaurants() {\r\n    const cSelect = d.getElementById('cuisines-select');\r\n    const nSelect = d.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood)\r\n      .then(restaurants => {\r\n        resetRestaurants();\r\n        fillRestaurantsHTML(restaurants);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Clear current restaurants, their HTML and remove their map markers.\r\n   */\r\n  function resetRestaurants() {\r\n    // Remove all restaurants.\r\n    const ul = d.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n    // If offline, markers could be not initialized.\r\n    if (markers.length) {\r\n      /* Remove all map markers. When a DOM Element is removed, its listeners are removed from memory too. */\r\n      markers.forEach(m => m.setMap(null));\r\n      markers = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create all restaurants HTML and add them to the webpage.\r\n   */\r\n  function fillRestaurantsHTML(restaurants) {\r\n    const notice = d.getElementById('results-notice');\r\n    if (!restaurants.length) {\r\n      notice.innerHTML = 'No restaurants found';\r\n    } else {\r\n      const ul = d.getElementById('restaurants-list');\r\n      restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n      });\r\n      let s = (restaurants.length > 1) ? 's' : '';\r\n      notice.innerHTML = `${restaurants.length} restaurant${s} found`;\r\n    }\r\n    if (n.onLine) addMarkersToMap(restaurants);\r\n  }\r\n\r\n  /**\r\n   * Create restaurant HTML.\r\n   */\r\n  function createRestaurantHTML(restaurant) {\r\n    const li = d.createElement('li');\r\n    const article = d.createElement('article');\r\n\r\n    const image = d.createElement('img');\r\n    image.className = 'restaurant-img';\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant, 800);\r\n    image.sizes = '(min-width: 1366px) calc((1366px - 5rem) / 4), (min-width: 1080px) calc((100vw - 4rem) / 3), (min-width: 700px) calc((100vw - 3rem) / 2), calc(100vw - 2rem)';\r\n    image.srcset = DBHelper.formatSrcset(restaurant);\r\n    /* Adding alternative text for images is the first principle of web accessibility. [...] Every image must have an alt attribute. This is a requirement of HTML standard (with perhaps a few exceptions in HTML5). Images without an alt attribute are likely inaccessible. In some cases, images may be given an empty or null alt attribute (e.g., alt=\"\"). https://webaim.org/techniques/alttext/ */\r\n    image.alt = restaurant.photoDescription || `The ${restaurant.cuisine_type} Restaurant ${restaurant.name}`;\r\n    article.append(image);\r\n\r\n    const name = d.createElement('h3');\r\n    name.innerHTML = restaurant.name;\r\n    article.append(name);\r\n\r\n    const neighborhood = d.createElement('p');\r\n    const strong = d.createElement('strong');\r\n    strong.innerHTML = `${restaurant.neighborhood}`;\r\n    neighborhood.append(strong);\r\n    article.append(neighborhood);\r\n\r\n    const address = d.createElement('address');\r\n    const addressContent = d.createElement('p');\r\n    addressContent.innerHTML = restaurant.address;\r\n    address.append(addressContent);\r\n    article.append(address);\r\n\r\n    const more = d.createElement('p');\r\n    const button = d.createElement('a');\r\n    button.innerHTML = 'View Details';\r\n    button.href = DBHelper.urlForRestaurant(restaurant);\r\n    button.className = 'button';\r\n    /* Relying on the title attribute is currently discouraged as many user agents do not expose the attribute in an accessible manner as required by w3c specifications. https://www.w3.org/TR/html/dom.html#the-title-attribute */\r\n    /* The only very tiny exception a title attribute will be read by a screen reader is if there's absolutely no link anchor text. https://silktide.com/i-thought-title-text-improved-accessibility-i-was-wrong/ */\r\n    /*  One alternative option could be using aria-labelledby, but in this case it's better using the aria-label attribute instead of title. N.B. The aria-label overrides the link text. */\r\n    button.setAttribute('aria-label', `View Details about ${restaurant.name}`);\r\n    more.append(button);\r\n    article.append(more);\r\n\r\n    li.append(article);\r\n    return li;\r\n  }\r\n\r\n  /**\r\n   * Add markers for current restaurants to the map.\r\n   */\r\n  function addMarkersToMap(restaurants) {\r\n    restaurants.forEach(restaurant => {\r\n      // Add marker to the map.\r\n      const marker = DBHelper.mapMarkerForRestaurant(restaurant, map);\r\n      marker.addListener('click', () => {\r\n        w.location.href = marker.url;\r\n      });\r\n      markers.push(marker);\r\n    });\r\n    // Create an overlay object for assign an id to markerLayer.\r\n    const overlay = new google.maps.OverlayView();\r\n    overlay.draw = function () {\r\n      this.getPanes().markerLayer.id='markerLayer';\r\n    };\r\n    overlay.setMap(map);\r\n    if (!tilesLoaded) {\r\n      // This event fires when the visible tiles have finished loading.\r\n      const listenerTiles = map.addListener('tilesloaded', () => {\r\n        addAccessibilityToMarkers(restaurants);\r\n        tilesLoaded = true;\r\n        google.maps.event.removeListener(listenerTiles);\r\n      });\r\n    } else {\r\n      addAccessibilityToMarkers(restaurants);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make markers focusable.\r\n   */\r\n  function addAccessibilityToMarkers(restaurants) {\r\n    setTimeout(() => {\r\n      // Markers are coded with area tags.\r\n      const areas = d.querySelectorAll('[id^=\"gmimap\"]> area');\r\n      /* Seems impossible to style marker directly, but to any marker corresponds an img tag and the order is the same. */\r\n      const layers = d.querySelectorAll('#markerLayer img');\r\n      for (let i = 0; i < areas.length; i++) {\r\n        areas[i].tabIndex = 0;\r\n        areas[i].addEventListener('focus', () => {\r\n          layers[i].classList.add('focused');\r\n        });\r\n        areas[i].addEventListener('blur', () => {\r\n          layers[i].classList.remove('focused');\r\n        });\r\n        // Google Maps allows only click event on markers.\r\n        areas[i].addEventListener('keydown', (e) => {\r\n          if (e.keyCode === 13) {\r\n            w.location.href = DBHelper.urlForRestaurant(restaurants[i]);\r\n          }\r\n        });\r\n      }\r\n      const s = (restaurants.length > 1) ? 's' : '';\r\n      /* Relying on the title attribute is currently discouraged. See above. However, many sources say that <iframe> elements in the d must have a title that is not empty to describe their contents to screen reader users. https://dequeuniversity.com/rules/axe/2.2/frame-title */\r\n      d.querySelector('#map iframe').title = `Map shows ${restaurants.length} restaurant${s}`;\r\n    }, 150);\r\n  }\r\n\r\n})(window, document, navigator);"]}