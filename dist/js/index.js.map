{"version":3,"sources":["js/index.js"],"names":["w","d","n","fetch","callback","map","markers","tilesLoaded","initMap","staticMap","swapMapListener","swapMap","getElementById","style","display","removeAttribute","setTimeout","focus","addEventListener","e","initResponsiveFreeStaticMap","listenerTiles","google","maps","Map","center","lat","lng","zoom","scrollwheel","keyboardShortcuts","updateRestaurants","addListener","skipMap","createElement","innerHTML","mapContainer","insertAdjacentElement","href","mapLabel","className","querySelector","mapDOMElement","div","setAttribute","classList","add","remove","setOptions","event","removeListener","nSelect","addSelectListener","cSelect","DBHelper","fetchNeighborhoods","console","log","error","then","fillCuisinesHTML","catch","onLine","fillMapOfflineAlert","mapOfflineAlert","readyState","ifDOMLoaded","h","scale","aspectRatio","toFixed","round","backgroundImage","select","neighborhoods","forEach","option","value","neighborhood","append","cuisine","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","resetRestaurants","setMap","length","m","notice","restaurants","ul","restaurant","image","alt","photoDescription","cuisine_type","name","photograph","webpSource","jpgSource","formatSrcset","sizes","imageUrlForRestaurant","srcset","picture","replace","article","strong","address","addressContent","more","button","urlForRestaurant","li","addMarkersToMap","s","marker","mapMarkerForRestaurant","location","url","overlay","OverlayView","addAccessibilityToMarkers","this","markerLayer","id","fillRestaurantsHTML","areas","querySelectorAll","tabIndex","_loop","i","layers","keyCode","title","window","document","navigator"],"mappings":"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","file":"index.js","sourcesContent":["'use strict';\r\n\r\n((w, d, n) => {\r\n\r\n  if (!w.fetch) {\r\n    console.log('Fetch API not supported');\r\n    return;\r\n  }\r\n\r\n  let map,\r\n    markers = [],\r\n    tilesLoaded = false;\r\n\r\n  /**\r\n   * Initialize Google map, called from HTML.\r\n   */\r\n  w.initMap = () => {\r\n    if(!n.onLine) return;\r\n    initStaticMap();\r\n    let loc = {\r\n      lat: 40.722216,\r\n      lng: -73.987501\r\n    };\r\n    map = new google.maps.Map(d.getElementById('map'), {\r\n      center: loc,\r\n      zoom: 12,\r\n      scrollwheel: false,\r\n      keyboardShortcuts: false // Disable Google Maps keyboard UI.\r\n    });\r\n    updateRestaurants();\r\n    initMapAccessibility();\r\n  };\r\n\r\n  /**\r\n   * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n   */\r\n  onReady(() => {\r\n    addSelectListener();\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n    if (!n.onLine) { // Check if offline.\r\n      fillMapOfflineAlert();\r\n      updateRestaurants();\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Catch DOMContentLoaded event even the script is loading asynchronously.\r\n   */\r\n  function onReady(callback) {\r\n    d.readyState !== 'loading' ? callback() : d.addEventListener('DOMContentLoaded', function ifDOMLoaded() {\r\n      callback();\r\n      d.removeEventListener('DOMContentLoaded', ifDOMLoaded);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Initialize and make responsive Google maps static API.\r\n   */\r\n  function initResponsiveFreeStaticMap() {\r\n    const staticMap = d.getElementById('static-map');\r\n    let w = staticMap.clientWidth,\r\n      h = staticMap.clientHeight;\r\n    /* The free Google maps static API returns 640x640 maximum image resolution, and 1280x1280 with scale 2. */\r\n    const scale = w > 640 || h > 640 ? 2 : 1,\r\n    aspectRatio = w > h ? +(w/h).toFixed(6) : +(h/w).toFixed(6);\r\n    if (w > h) {\r\n      w = w > 640 ? 640 : w;\r\n      h = Math.round(w/aspectRatio);\r\n    } else {\r\n      h = h > 640 ? 640 : h;\r\n      w = Math.round(h/aspectRatio);\r\n    }\r\n    staticMap.style.backgroundImage = `url(https://maps.googleapis.com/maps/api/staticmap?center=40.722216,-73.987501&zoom=12&size=${w}x${h}&scale=${scale}&key=AIzaSyAxfOOcB40yMKfupF4qyfa4hwvhTclZboA)`;\r\n  }\r\n\r\n  function swapMapListener() {\r\n    const staticMap = d.getElementById('static-map');\r\n    staticMap.addEventListener('click', () => {\r\n      swapMap();\r\n    });\r\n\r\n    staticMap.addEventListener('keydown', (e) => {\r\n      if (e.keyCode === 13) {\r\n        swapMap();\r\n      }\r\n    });\r\n\r\n    function swapMap() {\r\n      d.getElementById('map').style.display = 'block';\r\n      staticMap.removeAttribute('tabindex');\r\n      staticMap.removeAttribute('role');\r\n      staticMap.removeAttribute('aria-label');\r\n      setTimeout(() => {\r\n        d.querySelector('#map div[tabindex=\"0\"]').focus();\r\n      }, 1000);\r\n    }\r\n  }\r\n\r\n  function initStaticMap() {\r\n    swapMapListener();\r\n    initResponsiveFreeStaticMap();\r\n    // Reboot Google maps static API on window resize.\r\n    w.addEventListener('resize', () => {\r\n      requestAnimationFrame(initResponsiveFreeStaticMap);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set map offline alert.\r\n   */\r\n  function fillMapOfflineAlert() {\r\n    const staticMap = d.getElementById('static-map');\r\n    const mapOfflineAlert = d.createElement('p');\r\n    mapOfflineAlert.setAttribute('role', 'alert');\r\n    mapOfflineAlert.innerHTML = '⚠ You are offline, map is not available.';\r\n    staticMap.classList.add('offline');\r\n    staticMap.append(mapOfflineAlert);\r\n  }\r\n\r\n  /**\r\n   * Add event listener on select elements to filter results.\r\n   */\r\n  function addSelectListener() {\r\n    const nSelect = d.getElementById('neighborhoods-select');\r\n    const cSelect = d.getElementById('cuisines-select');\r\n    nSelect.addEventListener('change', updateRestaurants);\r\n    cSelect.addEventListener('change', updateRestaurants);\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods and set their HTML with proper error handling.\r\n   */\r\n  function fetchNeighborhoods() {\r\n    DBHelper.fetchNeighborhoods()\r\n      .then(fillNeighborhoodsHTML)\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Set neighborhoods HTML.\r\n   */\r\n  function fillNeighborhoodsHTML(neighborhoods) {\r\n    const select = d.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n      const option = d.createElement('option');\r\n      option.innerHTML = neighborhood;\r\n      option.value = neighborhood;\r\n      select.append(option);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines and set their HTML with proper error handling.\r\n   */\r\n  function fetchCuisines() {\r\n    DBHelper.fetchCuisines()\r\n      .then(fillCuisinesHTML)\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Set cuisines HTML.\r\n   */\r\n  function fillCuisinesHTML(cuisines) {\r\n    const select = d.getElementById('cuisines-select');\r\n    cuisines.forEach(cuisine => {\r\n      const option = d.createElement('option');\r\n      option.innerHTML = cuisine;\r\n      option.value = cuisine;\r\n      select.append(option);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fix some accessibility issue with Google map.\r\n   */\r\n  function initMapAccessibility() {\r\n    // This event fires when the visible tiles have finished loading.\r\n    const listenerTiles = map.addListener('tilesloaded', () => {\r\n      const mapContainer = d.getElementById('map-container');\r\n\r\n      // Add a skip map link.\r\n      const skipMap = d.createElement('a');\r\n      skipMap.className = 'skip-link button';\r\n      skipMap.href = '#filter-options';\r\n      skipMap.innerHTML = 'Skip the map';\r\n      mapContainer.insertAdjacentElement('afterbegin', skipMap);\r\n\r\n      // Add a map label.\r\n      const mapLabel = d.createElement('h2');\r\n      mapLabel.id = 'map-label';\r\n      mapLabel.className = 'sr-only';\r\n      mapLabel.innerHTML = 'Google Maps Widget: shows restaurants location';\r\n      mapContainer.insertAdjacentElement('afterbegin', mapLabel);\r\n\r\n      // Add aria-lebelledBy to the div focusable with tab.\r\n      const div = d.querySelector('#map div[tabindex=\"0\"]');\r\n      div.setAttribute('aria-labelledby', 'map-label');\r\n\r\n      const mapDOMElement = d.getElementById('map');\r\n\r\n      // Highlight when map DOM element is onfocus.\r\n      div.addEventListener('focus', () => {\r\n        mapDOMElement.classList.add('focused');\r\n      });\r\n\r\n      // Remove highlight when map DOM element is onblur.\r\n      div.addEventListener('blur', () => {\r\n        mapDOMElement.classList.remove('focused');\r\n      });\r\n\r\n      /* Enable Google Maps keyboard UI, when map DOM element or any of his children is onfocus. */\r\n      mapDOMElement.addEventListener('focus', () => {\r\n        map.setOptions({keyboardShortcuts: true});\r\n      }, true);\r\n\r\n      /* Disable Google Maps keyboard UI, when map DOM element or any of his children is onblur. */\r\n      mapDOMElement.addEventListener('blur', () => {\r\n        map.setOptions({keyboardShortcuts: false});\r\n      }, true);\r\n\r\n      // Remove event listener.\r\n      google.maps.event.removeListener(listenerTiles);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update page and map for current restaurants with proper error handling.\r\n   */\r\n  function updateRestaurants() {\r\n    const cSelect = d.getElementById('cuisines-select');\r\n    const nSelect = d.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood)\r\n      .then(restaurants => {\r\n        resetRestaurants();\r\n        fillRestaurantsHTML(restaurants);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Clear current restaurants, their HTML and remove their map markers.\r\n   */\r\n  function resetRestaurants() {\r\n    // Remove all restaurants.\r\n    const ul = d.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n    // If offline, markers could be not initialized.\r\n    if (markers.length) {\r\n      /* Remove all map markers. When a DOM Element is removed, its listeners are removed from memory too. */\r\n      markers.forEach(m => m.setMap(null));\r\n      markers = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create all restaurants HTML and add them to the webpage.\r\n   */\r\n  function fillRestaurantsHTML(restaurants) {\r\n    const notice = d.getElementById('results-notice');\r\n    if (!restaurants.length) {\r\n      notice.innerHTML = 'No restaurants found';\r\n    } else {\r\n      const ul = d.getElementById('restaurants-list');\r\n      restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n      });\r\n      let s = (restaurants.length > 1) ? 's' : '';\r\n      notice.innerHTML = `${restaurants.length} restaurant${s} found`;\r\n    }\r\n    if (n.onLine) addMarkersToMap(restaurants);\r\n  }\r\n\r\n  /**\r\n   * Create restaurant HTML.\r\n   */\r\n  function createRestaurantHTML(restaurant) {\r\n    const li = d.createElement('li');\r\n    const article = d.createElement('article');\r\n\r\n    const image = d.createElement('img');\r\n    image.className = 'restaurant-img';\r\n    /* Adding alternative text for images is the first principle of web accessibility. [...] Every image must have an alt attribute. This is a requirement of HTML standard (with perhaps a few exceptions in HTML5). Images without an alt attribute are likely inaccessible. In some cases, images may be given an empty or null alt attribute (e.g., alt=\"\"). https://webaim.org/techniques/alttext/ */\r\n    image.alt = restaurant.photoDescription || `The ${restaurant.cuisine_type} Restaurant ${restaurant.name}`;\r\n\r\n    if (!restaurant.photograph) {\r\n      image.src = '/img/image-placeholder.svg';\r\n      article.append(image);\r\n    } else {\r\n      const picture = d.createElement('picture');\r\n      const jpgSource = d.createElement('source');\r\n      const webpSource = d.createElement('source');\r\n      jpgSource.sizes = '(min-width: 1366px) calc((1366px - 5rem) / 4), (min-width: 1080px) calc((100vw - 4rem) / 3), (min-width: 700px) calc((100vw - 3rem) / 2), calc(100vw - 2rem)';\r\n      webpSource.sizes = jpgSource.sizes;\r\n      jpgSource.srcset = DBHelper.formatSrcset(restaurant);\r\n      webpSource.srcset = jpgSource.srcset.replace(/w.jpg/g, 'w.webp');\r\n      image.src = DBHelper.imageUrlForRestaurant(restaurant, 800);\r\n\r\n      picture.append(image);\r\n      image.insertAdjacentElement('beforebegin', webpSource);\r\n      image.insertAdjacentElement('beforebegin', jpgSource);\r\n      article.append(picture);\r\n    }\r\n\r\n    const name = d.createElement('h3');\r\n    name.innerHTML = restaurant.name;\r\n    article.append(name);\r\n\r\n    const neighborhood = d.createElement('p');\r\n    const strong = d.createElement('strong');\r\n    strong.innerHTML = `${restaurant.neighborhood}`;\r\n    neighborhood.append(strong);\r\n    article.append(neighborhood);\r\n\r\n    const address = d.createElement('address');\r\n    const addressContent = d.createElement('p');\r\n    addressContent.innerHTML = restaurant.address;\r\n    address.append(addressContent);\r\n    article.append(address);\r\n\r\n    const more = d.createElement('p');\r\n    const button = d.createElement('a');\r\n    button.innerHTML = 'View Details';\r\n    button.href = DBHelper.urlForRestaurant(restaurant);\r\n    button.className = 'button';\r\n    /* Relying on the title attribute is currently discouraged as many user agents do not expose the attribute in an accessible manner as required by w3c specifications. https://www.w3.org/TR/html/dom.html#the-title-attribute */\r\n    /* The only very tiny exception a title attribute will be read by a screen reader is if there's absolutely no link anchor text. https://silktide.com/i-thought-title-text-improved-accessibility-i-was-wrong/ */\r\n    /*  One alternative option could be using aria-labelledby, but in this case it's better using the aria-label attribute instead of title. N.B. The aria-label overrides the link text. */\r\n    button.setAttribute('aria-label', `View Details about ${restaurant.name}`);\r\n    more.append(button);\r\n    article.append(more);\r\n\r\n    li.append(article);\r\n    return li;\r\n  }\r\n\r\n  /**\r\n   * Add markers for current restaurants to the map.\r\n   */\r\n  function addMarkersToMap(restaurants) {\r\n    restaurants.forEach(restaurant => {\r\n      // Add marker to the map.\r\n      const marker = DBHelper.mapMarkerForRestaurant(restaurant, map);\r\n      marker.addListener('click', () => {\r\n        w.location.href = marker.url;\r\n      });\r\n      markers.push(marker);\r\n    });\r\n    // Create an overlay object for assign an id to markerLayer.\r\n    const overlay = new google.maps.OverlayView();\r\n    overlay.draw = function () {\r\n      this.getPanes().markerLayer.id='markerLayer';\r\n    };\r\n    overlay.setMap(map);\r\n    if (!tilesLoaded) {\r\n      // This event fires when the visible tiles have finished loading.\r\n      const listenerTiles = map.addListener('tilesloaded', () => {\r\n        addAccessibilityToMarkers(restaurants);\r\n        tilesLoaded = true;\r\n        google.maps.event.removeListener(listenerTiles);\r\n      });\r\n    } else {\r\n      addAccessibilityToMarkers(restaurants);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make markers focusable.\r\n   */\r\n  function addAccessibilityToMarkers(restaurants) {\r\n    setTimeout(() => {\r\n      // Markers are coded with area tags.\r\n      const areas = d.querySelectorAll('[id^=\"gmimap\"]> area');\r\n      /* Seems impossible to style marker directly, but to any marker corresponds an img tag and the order is the same. */\r\n      const layers = d.querySelectorAll('#markerLayer img');\r\n      for (let i = 0; i < areas.length; i++) {\r\n        areas[i].tabIndex = 0;\r\n        areas[i].addEventListener('focus', () => {\r\n          layers[i].classList.add('focused');\r\n        });\r\n        areas[i].addEventListener('blur', () => {\r\n          layers[i].classList.remove('focused');\r\n        });\r\n        // Google Maps allows only click event on markers.\r\n        areas[i].addEventListener('keydown', (e) => {\r\n          if (e.keyCode === 13) {\r\n            w.location.href = DBHelper.urlForRestaurant(restaurants[i]);\r\n          }\r\n        });\r\n      }\r\n      const s = (restaurants.length > 1) ? 's' : '';\r\n      /* Relying on the title attribute is currently discouraged. See above. However, many sources say that <iframe> elements in the d must have a title that is not empty to describe their contents to screen reader users. https://dequeuniversity.com/rules/axe/2.2/frame-title */\r\n      d.querySelector('#map iframe').title = `Map shows ${restaurants.length} restaurant${s}`;\r\n    }, 150);\r\n  }\r\n\r\n})(window, document, navigator);"]}