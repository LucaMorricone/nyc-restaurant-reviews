{"version":3,"sources":["js/dbhelper.js"],"names":["DBHelper","window","indexedDB","request","open","event","target","result","createObjectStore","keyPath","Promise","resolve","reject","onsuccess","db","transaction","objectStore","IDBRestaurants","cursor","store","length","push","value","fetch","DATABASE_URL","then","response","ok","statusText","Error","restaurants","forEach","restaurant","catch","console","log","error","openCursor","onerror","errorCode","json","fetchRestaurants","neighborhoods","map","v","i","neighborhood","filter","indexOf","uniqueNeighborhoods","cuisines","cuisine_type","cuisine","results","r","id","width","photograph","srcsetStr","w","imageUrlForRestaurant","join","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP"],"mappings":"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","file":"dbhelper.js","sourcesContent":["'use strict';\r\n\r\n/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n  /**\r\n   * Database URL.\r\n   * Change this to restaurants.json file location on your server.\r\n   */\r\n  static get DATABASE_URL() {\r\n    const port = 1337; // Change this to your server port.\r\n    return `http://localhost:${port}/restaurants`;\r\n  }\r\n\r\n  /**\r\n   * Fetch all restaurants with proper error handling.\r\n   */\r\n  static fetchRestaurants() {\r\n    // Check if indexedDB is supported.\r\n    if (window.indexedDB) {\r\n      // Open a connection with indexedDB.\r\n      const request = window.indexedDB.open('nyc_rr_data', 1);\r\n\r\n      // Create the object store.\r\n      request.onupgradeneeded = event => {\r\n        const db = event.target.result;\r\n        db.createObjectStore('restaurants', {keyPath: 'id'});\r\n      };\r\n\r\n      // The fetchRestaurants function must return a Promise.\r\n      return new Promise((resolve, reject) => {\r\n\r\n        request.onsuccess = event => {\r\n          const db = event.target.result;\r\n          // Open a transaction and obtain a reference to the object store.\r\n          const store = db.transaction(['restaurants'], 'readwrite').objectStore('restaurants');\r\n\r\n          resolve(new Promise((resolve, reject) => {\r\n            // Use cursors to retrieve all objects in the object store and add them to an array.\r\n            let IDBRestaurants = [];\r\n            store.openCursor().onsuccess = event => {\r\n              let cursor = event.target.result;\r\n              // Check if the object store is empty.\r\n              if (!cursor && !IDBRestaurants.length) {\r\n                // Fetch from the network.\r\n                resolve(fetch(DBHelper.DATABASE_URL)\r\n                  .then(response => {\r\n                    if (!response.ok) {\r\n                      throw Error(`Request failed. Returned status of ${response.statusText}`);\r\n                    }\r\n                    return response.json();\r\n                  })\r\n                  .then(restaurants => {\r\n                    // Open a transaction.\r\n                    const store = db.transaction(['restaurants'], 'readwrite').objectStore('restaurants');\r\n                    // Save data into the object store.\r\n                    restaurants.forEach(restaurant => {\r\n                      store.add(restaurant);\r\n                    });\r\n                    return restaurants;\r\n                  })\r\n                  .catch(error => {\r\n                    console.log(error);\r\n                  }));\r\n              } else if (cursor) { // Check the cursor.\r\n                // Save cursor value in an array.\r\n                IDBRestaurants.push(cursor.value);\r\n                cursor.continue();\r\n              } else {\r\n                // Return all data from indexedDB.\r\n                resolve(IDBRestaurants);\r\n              }\r\n            };\r\n            store.openCursor().onerror = event => {\r\n              reject(event.target.errorCode);\r\n            };\r\n          }));\r\n        };\r\n        request.onerror = event => {\r\n          reject(event.target.errorCode);\r\n        };\r\n      });\r\n    } else { // If indexedDB is not supported.\r\n      return fetch(DBHelper.DATABASE_URL)\r\n        .then(response => {\r\n          if (!response.ok) {\r\n            throw Error(`Request failed. Returned status of ${response.statusText}`);\r\n          }\r\n          return response.json();\r\n        })\r\n        .then(restaurants => {\r\n          return restaurants;\r\n        })\r\n        .catch(error => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods with proper error handling.\r\n   */\r\n  static fetchNeighborhoods() {\r\n    // Fetch all restaurants.\r\n    return DBHelper.fetchRestaurants()\r\n      .then(restaurants => {\r\n        // Get all neighborhoods from all restaurants.\r\n        const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood);\r\n        // Remove duplicates from neighborhoods.\r\n        const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) === i);\r\n        return uniqueNeighborhoods;\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines with proper error handling.\r\n   */\r\n  static fetchCuisines() {\r\n    // Fetch all restaurants.\r\n    return DBHelper.fetchRestaurants()\r\n      .then(restaurants => {\r\n        // Get all cuisines from all restaurants.\r\n        const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type);\r\n        // Remove duplicates from cuisines.\r\n        const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) === i);\r\n        return uniqueCuisines;\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood) {\r\n    // Fetch all restaurants.\r\n    return DBHelper.fetchRestaurants()\r\n      .then(restaurants => {\r\n        let results = restaurants;\r\n        if (cuisine != 'all') { // Filter by cuisine.\r\n          results = results.filter(r => r.cuisine_type === cuisine);\r\n        }\r\n        if (neighborhood != 'all') { // Filter by neighborhood.\r\n          results = results.filter(r => r.neighborhood === neighborhood);\r\n        }\r\n        return results;\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch a restaurant by its ID with proper error handling.\r\n   */\r\n  static fetchRestaurantById(id) {\r\n    // Fetch all restaurants with proper error handling.\r\n    return DBHelper.fetchRestaurants()\r\n      .then(restaurants => {\r\n        const restaurant = restaurants.find(r => r.id == id);\r\n        if (!restaurant) { // Restaurant does not exist in the database.\r\n          throw Error('Restaurant does not exist');\r\n        }\r\n        return restaurant; // Got the restaurant.\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Restaurant image URL.\r\n   */\r\n  static imageUrlForRestaurant(restaurant, width) {\r\n    /* const extension = restaurant.photograph.split('.').pop();\r\n    const name = restaurant.photograph.slice(0, restaurant.photograph.indexOf(`.${extension}`));\r\n    return (`/img/${name}-${width}w.${extension}`); */\r\n    return restaurant.photograph ? `/img/${restaurant.photograph}-${width}w.jpg` : '/img/image-placeholder.svg';\r\n  }\r\n\r\n  /**\r\n   * Restaurant image srcset.\r\n   */\r\n  static formatSrcset(restaurant) {\r\n    let srcsetStr = [];\r\n    for (let w = 3; w < 9; w++) {\r\n      srcsetStr.push(`${DBHelper.imageUrlForRestaurant(restaurant, w*100)} ${w*100}w`);\r\n    }\r\n    return srcsetStr.join(', ');\r\n  }\r\n\r\n  /**\r\n   * Restaurant page URL.\r\n   */\r\n  static urlForRestaurant(restaurant) {\r\n    return (`/restaurant.html?id=${restaurant.id}`);\r\n  }\r\n\r\n  /**\r\n   * Map marker for a restaurant.\r\n   */\r\n  static mapMarkerForRestaurant(restaurant, map) {\r\n    const marker = new google.maps.Marker({\r\n      position: restaurant.latlng,\r\n      title: `${restaurant.name} ${restaurant.neighborhood}`,\r\n      url: DBHelper.urlForRestaurant(restaurant),\r\n      map: map,\r\n      animation: google.maps.Animation.DROP\r\n    });\r\n    return marker;\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a cuisine type with proper error handling.\r\n   */\r\n  static fetchRestaurantByCuisine(cuisine) {\r\n    // Fetch all restaurants.\r\n    return DBHelper.fetchRestaurants()\r\n      .then(restaurants => {\r\n        // Filter restaurants to have only given cuisine type.\r\n        return restaurants.filter(r => r.cuisine_type == cuisine);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Fetch restaurants by a neighborhood with proper error handling.\r\n   */\r\n  static fetchRestaurantByNeighborhood(neighborhood) {\r\n    // Fetch all restaurants.\r\n    return DBHelper.fetchRestaurants()\r\n      .then(restaurants => {\r\n        // Filter restaurants to have only given neighborhood.\r\n        return restaurants.filter(r => r.neighborhood == neighborhood);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n}\r\n"]}