{"version":3,"sources":["js/index.js"],"names":["w","d","n","fetch","map","markers","tilesLoaded","initMap","onLine","mapContainer","lng","google","maps","Map","getElementById","center","lat","loc","zoom","keyboardShortcuts","skipMap","className","createElement","href","innerHTML","insertAdjacentElement","mapLabel","div","setAttribute","mapDOMElement","classList","add","remove","setOptions","event","removeListener","listenerTiles","addEventListener","nSelect","cSelect","mapOfflineAlert","addSelectListener","updateRestaurants","DBHelper","fetchNeighborhoods","then","fillNeighborhoodsHTML","catch","fetchCuisines","console","log","error","fillMapOfflineAlert","neighborhoods","select","forEach","option","value","cuisines","cuisine","append","nIndex","selectedIndex","neighborhood","resetRestaurants","fillRestaurantsHTML","length","m","setMap","restaurants","notice","ul","createRestaurantHTML","restaurant","article","image","src","sizes","imageUrlForRestaurant","srcset","formatSrcset","photoDescription","cuisine_type","name","strong","addressContent","address","button","urlForRestaurant","more","li","s","marker","addListener","mapMarkerForRestaurant","location","url","push","overlay","OverlayView","getPanes","this","markerLayer","id","addAccessibilityToMarkers","addMarkersToMap","setTimeout","areas","querySelectorAll","layers","_loop","i","tabIndex","e","keyCode","querySelector","title","navigator"],"mappings":"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","file":"index.js","sourcesContent":["((w, d, n) => {\r\n  'use strict';\r\n\r\n  if (!w.fetch) {\r\n    console.log('Fetch API not supported');\r\n    return;\r\n  }\r\n\r\n  let map,\r\n    markers = [],\r\n    tilesLoaded = false;\r\n\r\n  /**\r\n   * Initialize Google map, called from HTML.\r\n   */\r\n  w.initMap = () => {\r\n    if(!n.onLine) return;\r\n    let loc = {\r\n      lat: 40.722216,\r\n      lng: -73.987501\r\n    };\r\n    map = new google.maps.Map(d.getElementById('map'), {\r\n      center: loc,\r\n      zoom: 12,\r\n      scrollwheel: false,\r\n      keyboardShortcuts: false // Disable Google Maps keyboard UI.\r\n    });\r\n    updateRestaurants();\r\n    initMapAccessibility();\r\n  };\r\n\r\n  /**\r\n   * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n   */\r\n  d.addEventListener('DOMContentLoaded', () => {\r\n    addSelectListener();\r\n    fetchNeighborhoods();\r\n    fetchCuisines();\r\n    if (!n.onLine) { // Check if offline.\r\n      fillMapOfflineAlert();\r\n      updateRestaurants();\r\n    }\r\n  });\r\n\r\n  /**\r\n   * Set map offline alert.\r\n   */\r\n  function fillMapOfflineAlert() {\r\n    const mapDOMElement = d.getElementById('map');\r\n    const mapOfflineAlert = d.createElement('p');\r\n    mapOfflineAlert.innerHTML = 'âš  You are offline, map is not available.';\r\n    mapDOMElement.setAttribute('role', 'alert');\r\n    mapDOMElement.classList.add('offline');\r\n    mapDOMElement.append(mapOfflineAlert);\r\n  }\r\n\r\n  /**\r\n   * Add event listener on select elements to filter results.\r\n   */\r\n  function addSelectListener() {\r\n    const nSelect = d.getElementById('neighborhoods-select');\r\n    const cSelect = d.getElementById('cuisines-select');\r\n    nSelect.addEventListener('change', updateRestaurants);\r\n    cSelect.addEventListener('change', updateRestaurants);\r\n  }\r\n\r\n  /**\r\n   * Fetch all neighborhoods and set their HTML with proper error handling.\r\n   */\r\n  function fetchNeighborhoods() {\r\n    DBHelper.fetchNeighborhoods()\r\n      .then(fillNeighborhoodsHTML)\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Set neighborhoods HTML.\r\n   */\r\n  function fillNeighborhoodsHTML(neighborhoods) {\r\n    const select = d.getElementById('neighborhoods-select');\r\n    neighborhoods.forEach(neighborhood => {\r\n      const option = d.createElement('option');\r\n      option.innerHTML = neighborhood;\r\n      option.value = neighborhood;\r\n      select.append(option);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fetch all cuisines and set their HTML with proper error handling.\r\n   */\r\n  function fetchCuisines() {\r\n    DBHelper.fetchCuisines()\r\n      .then(fillCuisinesHTML)\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Set cuisines HTML.\r\n   */\r\n  function fillCuisinesHTML(cuisines) {\r\n    const select = d.getElementById('cuisines-select');\r\n    cuisines.forEach(cuisine => {\r\n      const option = d.createElement('option');\r\n      option.innerHTML = cuisine;\r\n      option.value = cuisine;\r\n      select.append(option);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Fix some accessibility issue with Google map.\r\n   */\r\n  function initMapAccessibility() {\r\n    // This event fires when the visible tiles have finished loading.\r\n    const listenerTiles = map.addListener('tilesloaded', () => {\r\n      const mapContainer = d.getElementById('map-container');\r\n\r\n      // Add a skip map link.\r\n      const skipMap = d.createElement('a');\r\n      skipMap.className = 'skip-link button';\r\n      skipMap.href = '#filter-options';\r\n      skipMap.innerHTML = 'Skip the map';\r\n      mapContainer.insertAdjacentElement('afterbegin', skipMap);\r\n\r\n      // Add a map label.\r\n      const mapLabel = d.createElement('h2');\r\n      mapLabel.id = 'map-label';\r\n      mapLabel.className = 'sr-only';\r\n      mapLabel.innerHTML = 'Google Maps Widget: shows restaurants location';\r\n      mapContainer.insertAdjacentElement('afterbegin', mapLabel);\r\n\r\n      // Add aria-lebelledBy to the div focusable with tab.\r\n      const div = d.querySelector('#map div[tabindex=\"0\"]');\r\n      div.setAttribute('aria-labelledby', 'map-label');\r\n\r\n      const mapDOMElement = d.getElementById('map');\r\n\r\n      // Highlight when map DOM element is onfocus.\r\n      div.addEventListener('focus', () => {\r\n        mapDOMElement.classList.add('focused');\r\n      });\r\n\r\n      // Remove highlight when map DOM element is onblur.\r\n      div.addEventListener('blur', () => {\r\n        mapDOMElement.classList.remove('focused');\r\n      });\r\n\r\n      /* Enable Google Maps keyboard UI, when map DOM element or any of his children is onfocus. */\r\n      mapDOMElement.addEventListener('focus', () => {\r\n        map.setOptions({keyboardShortcuts: true});\r\n      }, true);\r\n\r\n      /* Disable Google Maps keyboard UI, when map DOM element or any of his children is onblur. */\r\n      mapDOMElement.addEventListener('blur', () => {\r\n        map.setOptions({keyboardShortcuts: false});\r\n      }, true);\r\n\r\n      // Remove event listener.\r\n      google.maps.event.removeListener(listenerTiles);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update page and map for current restaurants with proper error handling.\r\n   */\r\n  function updateRestaurants() {\r\n    const cSelect = d.getElementById('cuisines-select');\r\n    const nSelect = d.getElementById('neighborhoods-select');\r\n\r\n    const cIndex = cSelect.selectedIndex;\r\n    const nIndex = nSelect.selectedIndex;\r\n\r\n    const cuisine = cSelect[cIndex].value;\r\n    const neighborhood = nSelect[nIndex].value;\r\n\r\n    DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood)\r\n      .then(restaurants => {\r\n        resetRestaurants();\r\n        fillRestaurantsHTML(restaurants);\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Clear current restaurants, their HTML and remove their map markers.\r\n   */\r\n  function resetRestaurants() {\r\n    // Remove all restaurants.\r\n    const ul = d.getElementById('restaurants-list');\r\n    ul.innerHTML = '';\r\n    // If offline, markers could be not initialized.\r\n    if (markers.length) {\r\n      /* Remove all map markers. When a DOM Element is removed, its listeners are removed from memory too. */\r\n      markers.forEach(m => m.setMap(null));\r\n      markers = [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create all restaurants HTML and add them to the webpage.\r\n   */\r\n  function fillRestaurantsHTML(restaurants) {\r\n    const notice = d.getElementById('results-notice');\r\n    if (!restaurants.length) {\r\n      notice.innerHTML = 'No restaurants found';\r\n    } else {\r\n      const ul = d.getElementById('restaurants-list');\r\n      restaurants.forEach(restaurant => {\r\n        ul.append(createRestaurantHTML(restaurant));\r\n      });\r\n      let s = (restaurants.length > 1) ? 's' : '';\r\n      notice.innerHTML = `${restaurants.length} restaurant${s} found`;\r\n    }\r\n    if (n.onLine) addMarkersToMap(restaurants);\r\n  }\r\n\r\n  /**\r\n   * Create restaurant HTML.\r\n   */\r\n  function createRestaurantHTML(restaurant) {\r\n    const li = d.createElement('li');\r\n    const article = d.createElement('article');\r\n\r\n    const image = d.createElement('img');\r\n    image.className = 'restaurant-img';\r\n    image.src = DBHelper.imageUrlForRestaurant(restaurant, 800);\r\n    image.sizes = '(min-width: 1366px) calc((1366px - 5rem) / 4), (min-width: 1080px) calc((100vw - 4rem) / 3), (min-width: 700px) calc((100vw - 3rem) / 2), calc(100vw - 2rem)';\r\n    image.srcset = DBHelper.formatSrcset(restaurant);\r\n    /* Adding alternative text for images is the first principle of web accessibility. [...] Every image must have an alt attribute. This is a requirement of HTML standard (with perhaps a few exceptions in HTML5). Images without an alt attribute are likely inaccessible. In some cases, images may be given an empty or null alt attribute (e.g., alt=\"\"). https://webaim.org/techniques/alttext/ */\r\n    image.alt = restaurant.photoDescription || `The ${restaurant.cuisine_type} Restaurant ${restaurant.name}`;\r\n    article.append(image);\r\n\r\n    const name = d.createElement('h3');\r\n    name.innerHTML = restaurant.name;\r\n    article.append(name);\r\n\r\n    const neighborhood = d.createElement('p');\r\n    const strong = d.createElement('strong');\r\n    strong.innerHTML = `${restaurant.neighborhood}`;\r\n    neighborhood.append(strong);\r\n    article.append(neighborhood);\r\n\r\n    const address = d.createElement('address');\r\n    const addressContent = d.createElement('p');\r\n    addressContent.innerHTML = restaurant.address;\r\n    address.append(addressContent);\r\n    article.append(address);\r\n\r\n    const more = d.createElement('p');\r\n    const button = d.createElement('a');\r\n    button.innerHTML = 'View Details';\r\n    button.href = DBHelper.urlForRestaurant(restaurant);\r\n    button.className = 'button';\r\n    /* Relying on the title attribute is currently discouraged as many user agents do not expose the attribute in an accessible manner as required by w3c specifications. https://www.w3.org/TR/html/dom.html#the-title-attribute */\r\n    /* The only very tiny exception a title attribute will be read by a screen reader is if there's absolutely no link anchor text. https://silktide.com/i-thought-title-text-improved-accessibility-i-was-wrong/ */\r\n    /*  One alternative option could be using aria-labelledby, but in this case it's better using the aria-label attribute instead of title. N.B. The aria-label overrides the link text. */\r\n    button.setAttribute('aria-label', `View Details about ${restaurant.name}`);\r\n    more.append(button);\r\n    article.append(more);\r\n\r\n    li.append(article);\r\n    return li;\r\n  }\r\n\r\n  /**\r\n   * Add markers for current restaurants to the map.\r\n   */\r\n  function addMarkersToMap(restaurants) {\r\n    restaurants.forEach(restaurant => {\r\n      // Add marker to the map.\r\n      const marker = DBHelper.mapMarkerForRestaurant(restaurant, map);\r\n      marker.addListener('click', () => {\r\n        w.location.href = marker.url;\r\n      });\r\n      markers.push(marker);\r\n    });\r\n    // Create an overlay object for assign an id to markerLayer.\r\n    const overlay = new google.maps.OverlayView();\r\n    overlay.draw = function () {\r\n      this.getPanes().markerLayer.id='markerLayer';\r\n    };\r\n    overlay.setMap(map);\r\n    if (!tilesLoaded) {\r\n      // This event fires when the visible tiles have finished loading.\r\n      const listenerTiles = map.addListener('tilesloaded', () => {\r\n        addAccessibilityToMarkers(restaurants);\r\n        tilesLoaded = true;\r\n        google.maps.event.removeListener(listenerTiles);\r\n      });\r\n    } else {\r\n      addAccessibilityToMarkers(restaurants);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Make markers focusable.\r\n   */\r\n  function addAccessibilityToMarkers(restaurants) {\r\n    setTimeout(() => {\r\n      // Markers are coded with area tags.\r\n      const areas = d.querySelectorAll('[id^=\"gmimap\"]> area');\r\n      /* Seems impossible to style marker directly, but to any marker corresponds an img tag and the order is the same. */\r\n      const layers = d.querySelectorAll('#markerLayer img');\r\n      for (let i = 0; i < areas.length; i++) {\r\n        areas[i].tabIndex = 0;\r\n        areas[i].addEventListener('focus', () => {\r\n          layers[i].classList.add('focused');\r\n        });\r\n        areas[i].addEventListener('blur', () => {\r\n          layers[i].classList.remove('focused');\r\n        });\r\n        // Google Maps allows only click event on markers.\r\n        areas[i].addEventListener('keydown', (e) => {\r\n          if (e.keyCode === 13) {\r\n            w.location.href = DBHelper.urlForRestaurant(restaurants[i]);\r\n          }\r\n        });\r\n      }\r\n      const s = (restaurants.length > 1) ? 's' : '';\r\n      /* Relying on the title attribute is currently discouraged. See above. However, many sources say that <iframe> elements in the d must have a title that is not empty to describe their contents to screen reader users. https://dequeuniversity.com/rules/axe/2.2/frame-title */\r\n      d.querySelector('#map iframe').title = `Map shows ${restaurants.length} restaurant${s}`;\r\n    }, 150);\r\n  }\r\n\r\n})(window, document, navigator);"]}